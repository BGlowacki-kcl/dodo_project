import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';
import AuthForm from '../pages/SignInUp';
import { vi } from 'vitest';
import { authService } from '../services/auth.service';
import { useNotification } from '../context/notification.context';

// Mock the useNotification hook
vi.mock('../context/notification.context', () => ({
  useNotification: vi.fn(),
}));

// Mock the authService methods
vi.mock('../services/auth.service', () => ({
  authService: {
    signIn: vi.fn(),
    signUp: vi.fn(),
  },
}));

describe('AuthForm', () => {
  const mockShowNotification = vi.fn();

  beforeEach(() => {
    useNotification.mockReturnValue(mockShowNotification);
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  test('successful sign-in', async () => {
    authService.signIn.mockResolvedValueOnce();

    render(
      <MemoryRouter initialEntries={['/signin']}>
        <AuthForm />
      </MemoryRouter>
    );

    fireEvent.change(screen.getByPlaceholderText(/Enter your email/i), { target: { value: 'test@example.com' } });
    fireEvent.change(screen.getByPlaceholderText(/Enter your password/i), { target: { value: 'Password123' } });
    fireEvent.click(screen.getByRole('button', { name: /Sign In/i }));

    await waitFor(() => {
      expect(mockShowNotification).toHaveBeenCalledWith('Sign in successful!', 'success');
    });
  });

  test('successful sign-up', async () => {
    authService.signUp.mockResolvedValueOnce();

    render(
      <MemoryRouter initialEntries={['/signup']}>
        <AuthForm />
      </MemoryRouter>
    );

    fireEvent.change(screen.getByPlaceholderText(/Enter your email/i), { target: { value: 'test@example.com' } });
    fireEvent.change(screen.getByPlaceholderText(/Enter your password/i), { target: { value: 'Password123' } });
    fireEvent.change(screen.getByPlaceholderText(/Confirm your password/i), { target: { value: 'Password123' } });
    fireEvent.click(screen.getByRole('button', { name: /Sign Up/i }));

    await waitFor(() => {
      expect(mockShowNotification).toHaveBeenCalledWith('Sign up successful! Please complete your profile.', 'success');
    });
  });

  test('password mismatch during sign-up', async () => {
    render(
      <MemoryRouter initialEntries={['/signup']}>
        <AuthForm />
      </MemoryRouter>
    );

    fireEvent.change(screen.getByPlaceholderText(/Enter your email/i), { target: { value: 'test@example.com' } });
    fireEvent.change(screen.getByPlaceholderText(/Enter your password/i), { target: { value: 'Password123' } });
    fireEvent.change(screen.getByPlaceholderText(/Confirm your password/i), { target: { value: 'Password1234' } });
    fireEvent.click(screen.getByRole('button', { name: /Sign Up/i }));

    await waitFor(() => {
      expect(mockShowNotification).toHaveBeenCalledWith('Sign up failed. Please try again.', 'error');
      expect // T have: Passwords do not match.
    });
  });

  test('weak password during sign-up', async () => {
    render(
      <MemoryRouter initialEntries={['/signup']}>
        <AuthForm />
      </MemoryRouter>
    );

    fireEvent.change(screen.getByPlaceholderText(/Enter your email/i), { target: { value: 'test@example.com' } });
    fireEvent.change(screen.getByPlaceholderText(/Enter your password/i), { target: { value: 'weak' } });
    fireEvent.change(screen.getByPlaceholderText(/Confirm your password/i), { target: { value: 'weak' } });
    fireEvent.click(screen.getByRole('button', { name: /Sign Up/i }));

    await waitFor(() => {
      expect(mockShowNotification).toHaveBeenCalledWith('Password must be at least 8 characters long and contain an uppercase letter, a lowercase letter, and a number.', 'error');
    });
  });

  test('authentication error during sign-in', async () => {
    authService.signIn.mockRejectedValueOnce(new Error('Invalid credentials'));

    render(
      <MemoryRouter initialEntries={['/signin']}>
        <AuthForm />
      </MemoryRouter>
    );

    fireEvent.change(screen.getByPlaceholderText(/Enter your email/i), { target: { value: 'test@example.com' } });
    fireEvent.change(screen.getByPlaceholderText(/Enter your password/i), { target: { value: 'Password123' } });
    fireEvent.click(screen.getByRole('button', { name: /Sign In/i }));

    await waitFor(() => {
      expect(mockShowNotification).toHaveBeenCalledWith('Sign in failed. Please check your email and password.', 'error');
    });
  });
});